var express = require('express'),
    Post = require('../models/Post');
var router = express.Router();

router.get('/', function(req, res, next) {
  Post.find({}, function(err, posts) {
    if (err) {
      return next(err);
    }
    res.render('posts/index', {posts: posts});
  });
});

router.get('/new', function(req, res, next) {
  res.render('posts/new', {messages: req.flash()});
});

router.get('/:id/edit', function(req, res, next) {
  Post.findById(req.params.id, function(err, user) {
    if (err) {
      return next(err);
    }
    res.render('posts/edit', {user: user});
  });
});

router.put('/:id', function(req, res, next) {
  var err = validateForm(req.body);
  if (err) {
    req.flash('danger', err);
    return res.redirect('back');
  }

  Post.findById({_id: req.params.id}, function(err, user) {
    if (err) {
      return next(err);
    }
    if (!user) {
      req.flash('danger', '존재하지 않는 사용자입니다.');
      return res.redirect('back');
    }

    if (user.password !== req.body.current_password) {
      req.flash('danger', '현재 비밀번호가 일치하지 않습니다.');
      return res.redirect('back');
    }

    user.name = req.body.name;
    user.email = req.body.email;
    if (req.body.password) {
      user.password = user.generateHash(req.body.password);
    }

    user.save(function(err) {
      if (err) {
        return next(err);
      }
      req.flash('success', '사용자 정보가 변경되었습니다.');
      res.redirect('/posts');
    });
  });
});

router.delete('/:id', function(req, res, next) {
  Post.findOneAndRemove({_id: req.params.id}, function(err) {
    if (err) {
      return next(err);
    }
    req.flash('success', '사용자 계정이 삭제되었습니다.');
    res.redirect('/posts');
  });
});

module.exports = router;






----------------------------------------------------------------------------
var mongoose = require('mongoose'),
    Schema = mongoose.Schema;

var schema = new Schema({
  email: {type: String, required: true, index: true, unique: true, trim: true},
  password: {type: String},
  title: {type: String},
  content: {type: String},
  createdAt: {type: Date, default: Date.now}
});

var Post = mongoose.model('Post', schema);

module.exports = Post;
